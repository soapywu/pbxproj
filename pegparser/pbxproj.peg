/**
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 'License'); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
 */
{
    package pegparser

    import (
        "encoding/json"
        "errors"
        "reflect"
        "strconv"
        "strings"
    )


    type IterateActionType = int8

    const (
        IterateActionContinue IterateActionType = iota
        IterateActionBreak
    )

    type ObjectItem = SliceItem

    type Object struct {
        *SliceMap
    }

    type ObjectWithUUID struct {
        Object
        UUID string
    }

    func NewObjectItem(key string, value interface{}) ObjectItem {
        return SliceItem{key, value}
    }

    func NewObject() Object {
        return Object{
            SliceMap: NewSliceMap(),
        }
    }

    func NewObjectWithData(items []ObjectItem) Object {
        o := NewObject()
        for _, item := range items {
            o.Set(item.key, item.data)
        }

        return o
    }

func (o Object) toMarshalJSONData() map[string]interface{} {
	dataMap := make(map[string]interface{})
	o.Foreach(func(key string, val interface{}) IterateActionType {
		obj, ok := val.(Object)
		if ok {
			dataMap[key] = obj.toMarshalJSONData()
		} else {
			dataMap[key] = val
		}
		return IterateActionContinue
	})
	return dataMap
}

func (o Object) MarshalJSON() ([]byte, error) {
	return json.Marshal(o.toMarshalJSONData())
}

    func (o Object) IsEmpty() bool {
        if o.SliceMap == nil ||o.sl == nil {
            return true
        }
        return o.Size() == 0
    }

    func (o Object) GetObject(key string) Object {
        if value, ok := o.Get(key); ok {
            return value.(Object)
        }
        return NewObject()
    }

    func (o Object) GetString(key string) string {
        if value, ok := o.Get(key); ok {
            switch value.(type) {
            case string:
                return value.(string)
            default:
                return ""
            }
        }
        return ""
    }

    func (o Object) GetInt(key string) int {
        if value, ok := o.Get(key); ok {
            switch value.(type) {
            case int, int8, int16, int32, int64:
                return int(reflect.ValueOf(value).Int())
            }
        }
        return 0
    }

    type ApplyFunc = func(key string, val interface{}) IterateActionType
    type FilterFunc = func(key string, val interface{}) bool

    func (o Object) Foreach(apply ApplyFunc) {
        if o.IsEmpty() {
            return
        }
        for _, item := range o.Items() {
            if item.data == nil {
                continue
            }
            action := apply(item.key.(string), item.data)
            if action == IterateActionBreak {
                break
            }
        }
    }

    func (o Object) ForeachWithFilter(apply ApplyFunc, filter FilterFunc) {
        if o.IsEmpty() {
            return
        }
        for _, item := range o.Items() {
            key := item.key.(string)
            val := item.data
            if val == nil {
                continue
            }
            if filter(key, val) {
                action := apply(key, val)
                if action == IterateActionBreak {
                    break
                }
            }
        }
    }

    func (o Object) Filter(f func(key string, val interface{}) bool) Object {
        newObj := NewObject()
        for _, item := range o.Items() {
            key := item.key.(string)
            val := item.data
            if f(key, val) {
                newObj.Set(key, val)
            }
        }
        return newObj
    }

    func merge_obj(obj Object, secondObj Object) Object {
        for _, item := range secondObj.Items() {
            key := item.key.(string)
            val := item.data
            if _, ok := obj.Get(key); !ok {
                obj.Set(key, val)
            }
        }

        return obj
    }

    func toIfaceSlice(v interface{}) []interface{} {
        if v == nil {
            return nil
        }
        return v.([]interface{})
    }

    func charsToString(v interface{}) string {
        if v == nil {
            return ""
        }

        result := make([]string, len(v.([]interface{})))
        for i, v := range v.([]interface{}) {
            result[i] = string(v.([]uint8))
        }

        return strings.Join(result, "")
    }
}

/*
 *  Project: point of entry from pbxproj file
 */
Project <- headComment:SingleLineComment? InlineComment? _ obj:Object NewLine _ {
    proj := NewObject()
    proj.Set("project", obj)

    if headComment != nil {
        proj.Set("headComment", charsToString(headComment))
    }

    return proj, nil
}

Object <- "{" obj:(AssignmentList / EmptyBody) "}" {
    return obj, nil
}

EmptyBody <- _ {
    return NewObject(), nil
}

AssignmentList <- _ _list:((a:Assignment / d:DelimitedSection) _)+ {
    list := _list.([]interface{})
    returnObject := list[0].([]interface{})[0].(Object)
    for _, v := range list {
        another := v.([]interface{})[0].(Object)
        returnObject = merge_obj(returnObject, another)
    }

    return returnObject, nil
}


Assignment <- SimpleAssignment / CommentedAssignment

SimpleAssignment <- id:Identifier _ "=" _ val:Value ";" {
    result := NewObject();
    result.Set(id.(string), val)
    return result, nil
}

CommentedAssignment <- CommentedAssignment1 / CommentedAssignment2

CommentedAssignment1 <- commentedId:CommentedIdentifier _ "=" _ val:Value ";" {
    result := NewObject()
    commentKey := commentedId.(Object).GetString("id") + "_comment"

    result.Set(commentedId.(Object).GetString("id"), val)
    result.Set(commentKey, commentedId.(Object).ForceGet(commentKey))
    return result, nil
}

CommentedAssignment2 <- id:Identifier _ "=" _ commentedVal:CommentedValue ";" {
    result := NewObject()
    result.Set(id.(string), commentedVal.(Object).ForceGet("value"))
    result.Set(id.(string) + "_comment", commentedVal.(Object).ForceGet("comment"))
    return result, nil
}

CommentedIdentifier <- id:Identifier _ comment:InlineComment {
    result := NewObject()
    result.Set("id", id)
    result.Set(id.(string) + "_comment", strings.TrimSpace(comment.(string)))
    return result, nil
}

CommentedValue <- literal:Value _ comment:InlineComment {
    result := NewObject()
    result.Set("comment", strings.TrimSpace(comment.(string)))
    result.Set("value", strings.TrimSpace(literal.(string)))
    return result, nil
}

InlineComment <- InlineCommentOpen body:[^*]+ InlineCommentClose {
    return charsToString(body), nil
}

InlineCommentOpen <- "/*"

InlineCommentClose <- "*/"

DelimitedSection <- begin:DelimitedSectionBegin _ fields:(AssignmentList / EmptyBody) _ DelimitedSectionEnd {
    section := NewObject()
    section.Set(begin.(Object).GetString("name"), fields)
    return section, nil
}

DelimitedSectionBegin <- "/* Begin " sectionName:Identifier " section */" NewLine {
    result := NewObject()
    result.Set("name", sectionName)
    return result, nil
}

DelimitedSectionEnd <- "/* End " sectionName:Identifier " section */" NewLine {
    result := NewObject()
    result.Set("name", sectionName)
    return result, nil
}

Array <- "(" arr:(ArrayBody / EmptyArray ) ")" {
    return arr, nil
}

EmptyArray <- _ {
    return make([]interface{}, 0), nil
}

ArrayBody <- _ head:ArrayEntry _ tail:ArrayBody? _ {
    if tail != nil {
        return append([]interface{}{head}, tail.([]interface{})...), nil
    } else {
        return []interface{}{head}, nil
    }
}

ArrayEntry <- SimpleArrayEntry / CommentedArrayEntry

SimpleArrayEntry <- val:Value EndArrayEntry {
    return val, nil
}

CommentedArrayEntry <- val:Value _ comment:InlineComment EndArrayEntry {
    result := NewObject()
    result.Set("value", strings.TrimSpace(val.(string)))
    result.Set("comment", strings.TrimSpace(comment.(string)))
    return result, nil
}

EndArrayEntry <- "," / _ &")"

Identifier <- IdentifierDigit / QuotedString

IdentifierDigit <- id:[A-Za-z0-9_.]+ {
    return charsToString(id), nil
}

Value <- Object / Array / NumberValue / StringValue

NumberValue <- DecimalValue / IntegerValue

DecimalValue <- decimal:(IntegerValue "." IntegerValue) {
    return strconv.ParseFloat(charsToString(decimal), 32)
}

IntegerValue <- !Alpha number:Digit+ !NonTerminator {
    return strconv.ParseInt(charsToString(number), 10, 32)
}

StringValue <- QuotedString / LiteralString

QuotedString <- DoubleQuote str:QuotedBody DoubleQuote {
    return "\"" + str.(string) + "\"", nil
}

QuotedBody <- str:NonQuote+ {
    return charsToString(str), nil
}

NonQuote <- EscapedQuote / !DoubleQuote char:. {
    return char, nil
}

EscapedQuote <- "\\" DoubleQuote {
    return "\\\"", nil
}

LiteralString <- literal:LiteralChar+ {
    return charsToString(literal), nil
}

LiteralChar <- !InlineCommentOpen !LineTerminator char:NonTerminator {
    return char, nil
}

NonTerminator <- [^;,\n]

SingleLineComment <- "//" _ contents:OneLineString NewLine {
    return contents, nil
}

OneLineString <- content:NonLine* {
    return content, nil
}

Digit <- [0-9]

Alpha <- [a-zA-Z]

DoubleQuote <- '"'

_ "whitespace" <- whitespace*

whitespace <- NewLine / [\t ]

NonLine <- !NewLine char:Char {
    return char, nil
}

LineTerminator <- NewLine / ";"

NewLine <- [\n\r]

Char <- .

EOF <- !.


